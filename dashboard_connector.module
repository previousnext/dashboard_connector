<?php

/**
 * @file
 * Core implementation for pnx_dashboard module.
 */

define('DASHBOARD_CONNECTOR_ADMIN_PERMISSION', 'administer pnx dashboard module');

/**
 * Implements hook_ctools_plugin_directory().
 */
function dashboard_connector_ctools_plugin_directory($module, $type) {
  if ($module == 'dashboard_connector') {
    return 'plugins/' . $type;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function dashboard_connector_ctools_plugin_type() {
  return [
    'checker' => [
      'cache' => FALSE,
    ],
  ];
}

/**
 * Implements hook_permission().
 */
function dashboard_connector_permission() {
  return array(
    DASHBOARD_CONNECTOR_ADMIN_PERMISSION => array(
      'title' => t('Administer pnx dashboard'),
      'description' => t('Perform administration tasks on pnx dashboard module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dashboard_connector_menu() {
  return array(
    'admin/config/development/pnx-dashboard' => array(
      'title' => 'PNX Status Dashboard Connector',
      'description' => 'Configure the PreviousNext dashboard module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dashboard_connector_admin'),
      'access arguments' => array(DASHBOARD_CONNECTOR_ADMIN_PERMISSION),
      'file' => 'dashboard_connector.admin.inc',
    ),
  );
}

/**
 * Implements hook_cron().
 */
function dashboard_connector_cron() {
  if (variable_get('dashboard_connector_enabled', FALSE)) {
    watchdog('dashboard_connector', 'Sending checks.');
    dashboard_connector_send();
    watchdog('dashboard_connector', 'Checks sent.');
  }
}

/**
 * Sends check data to the PNX Dashboard.
 */
function dashboard_connector_send() {
  $checks = array();
  // Collect checks from plugins.
  ctools_include('plugins');
  foreach (ctools_get_plugins('dashboard_connector', 'checker') as $id => $plugin) {
    $class = $plugin['class'];
    /* @var CheckerInterface $instance */
    $instance = new $class();
    $checks = array_merge($checks, $instance->getChecks());
  }
  $snapshot = array(
    'timestamp' => (new \DateTime())->format(\DateTime::ISO8601),
    'client_id' => variable_get('dashboard_connector_client_id'),
    'site_id' => variable_get('dashboard_connector_site_id'),
    'checks' => $checks,
  );
  _dashboard_connector_do_send($snapshot);
}

/**
 * Do the actual sending.
 */
function _dashboard_connector_do_send($snapshot) {
  $url = variable_get('dashboard_connector_base_uri', 'https://status.previousnext.com.au/') . 'snapshots';
  $username = variable_get('dashboard_connector_username');
  $password = variable_get('dashboard_connector_password');

  $json = json_encode($snapshot);
  $options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Authorization' => 'Basic ' . base64_encode("$username:$password"),
    ),
    'data' => $json,
    'method' => 'POST',
  );
  $response = drupal_http_request($url, $options);

  if ($response->code != 204) {
    watchdog('dashboard_connector', 'Failed sending snapshot', array(), WATCHDOG_ERROR);
  }
}

<?php

/**
 * @file
 * Core implementation for pnx_dashboard module.
 */

define('DASHBOARD_CONNECTOR_ADMIN_PERMISSION', 'administer pnx dashboard module');

/**
 * Implements hook_ctools_plugin_directory().
 */
function dashboard_connector_ctools_plugin_directory($module, $type) {
  if ($module == 'dashboard_connector') {
    return 'plugins/' . $type;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function dashboard_connector_ctools_plugin_type() {
  return array(
    'checker' => array(
      'cache' => FALSE,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function dashboard_connector_permission() {
  return array(
    DASHBOARD_CONNECTOR_ADMIN_PERMISSION => array(
      'title' => t('Administer pnx dashboard'),
      'description' => t('Perform administration tasks on pnx dashboard module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dashboard_connector_menu() {
  return array(
    'admin/config/development/pnx-dashboard' => array(
      'title' => 'PNX Status Dashboard Connector',
      'description' => 'Configure the PreviousNext dashboard module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dashboard_connector_admin'),
      'access arguments' => array(DASHBOARD_CONNECTOR_ADMIN_PERMISSION),
      'file' => 'dashboard_connector.admin.inc',
    ),
  );
}

/**
 * Implements hook_cron().
 */
function dashboard_connector_cron() {
  if (variable_get('dashboard_connector_enabled', FALSE) && variable_get('dashboard_connector_base_uri', FALSE)) {
    watchdog('dashboard_connector', 'Sending checks.');
    dashboard_connector_send();
    watchdog('dashboard_connector', 'Checks sent.');
  }
}

/**
 * Sends check data to the PNX Dashboard.
 */
function dashboard_connector_send() {

  if (lock_acquire('dashboard_connector', 120)) {
    $now = time();
    $last_updated = variable_get('dashboard_connector_last_updated');
    // Only run every 4 hours, regardless of cron.
    if (!isset($last_updated) || $now - $last_updated > 60 * 60 * 4) {
      // We attempt all the updates in a try/catch block so we can ensure the
      // lock is released in the case of an Exception.
      try {
        $checks = array();
        // Collect checks from plugins.
        ctools_include('plugins');
        foreach (ctools_get_plugins('dashboard_connector', 'checker') as $id => $plugin) {
          $class = $plugin['class'];
          /* @var CheckerInterface $instance */
          $instance = new $class();
          $checks = array_merge($checks, $instance->getChecks());
        }
        _dashboard_connector_exclude($checks);
        $snapshot = array(
          'timestamp' => date(DateTime::ISO8601),
          'client_id' => variable_get('dashboard_connector_client_id'),
          'site_id' => variable_get('dashboard_connector_site_id'),
          'env' => variable_get('dashboard_connector_env', 'none'),
          'checks' => $checks,
        );

        // Send the snapshot.
        _dashboard_connector_do_send($snapshot);

        // Update the last updated timestamp.
        variable_set('dashboard_connector_last_updated', $now);
      }
      catch (\Exception $e) {
        // Release the lock.
        watchdog_exception('dashboard_connector', $e);
      }
    }
    lock_release('dashboard_connector');
  }
  else {
    watchdog('dashboard_connector', 'Process already running - could not acquire lock.', [], WATCHDOG_NOTICE);
  }
}

/**
 * Do the actual sending.
 */
function _dashboard_connector_do_send($snapshot) {
  $url = variable_get('dashboard_connector_base_uri') . 'snapshots';
  $username = variable_get('dashboard_connector_username');
  $password = variable_get('dashboard_connector_password');

  $json = json_encode($snapshot);
  $options = array(
    'headers' => array(
      'Content-Type' => 'application/json',
      'Authorization' => 'Basic ' . base64_encode("$username:$password"),
    ),
    'data' => $json,
    'method' => 'POST',
  );
  $response = drupal_http_request($url, $options);

  if ($response->code != 204) {
    watchdog('dashboard_connector', 'Failed sending snapshot. HTTP Response: @code', array('@code' => $response->code), WATCHDOG_ERROR);
  }
}

/**
 * Remove any checks we don't want to hear about.
 */
function _dashboard_connector_exclude(&$checks) {
  $exclude_checks = variable_get('dashboard_connector_exclude_checks', array());
  if (empty($exclude_checks) || !is_array($exclude_checks)) {
    return;
  }

  // If a check is present in $conf['exclude_checks'], append to its
  // description and change its alert level.
  foreach ($checks as &$check) {
    if (!empty($exclude_checks[$check['type']]) && in_array($check['name'], $exclude_checks[$check['type']])) {
      $check['description'] .= ' ' . t('(!alert_level overridden)', array('!alert_level' => $check['alert_level']));
      $check['alert_level'] = 'notice';
    }
  }
  reset($checks);
}
